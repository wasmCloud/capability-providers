name: HTTPCLIENT

on:
  push:
    branches: [main]
    paths:
      - "httpclient/**"
    tags:
      - "httpclient-v*"
  pull_request:
    branches: [main]
    paths:
      - "httpclient/**"

env:
  CARGO_TERM_COLOR: always
  working-directory: ./httpclient
  WASH_ISSUER_KEY: ${{ secrets.WASMCLOUD_ACCOUNT_OFFICIAL }}
  WASH_SUBJECT_KEY: ${{ secrets.WASMCLOUD_HTTPCLIENT }}

jobs:
  rust_check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - id: run-nats
        uses: wasmcloud/common-actions/run-nats@main
      - id: rust-check-action
        uses: wasmcloud/common-actions/rust-check@main
        with:
          working-directory: ${{ env.working-directory }}

  build_artifact:
    # if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    strategy:
      fail-fast: false
      matrix:
        config:
          # NOTE: We are building on an older version of ubuntu because of libc compatibility
          # issues. Namely, if we build on a new version of libc, it isn't backwards compatible with
          # old versions. But if we build on the old version, it is compatible with the newer
          # versions running in ubuntu 22 and its ilk
          - {
              os: "ubuntu-20.04",
              arch: "amd64",
              extension: "",
              targetPath: "target/release/",
            }
          - {
              os: "ubuntu-20.04",
              arch: "aarch64",
              extension: "",
              targetPath: "target/aarch64-unknown-linux-gnu/release/",
            }
          - {
              os: "macos-latest",
              arch: "amd64",
              extension: "",
              targetPath: "target/release/",
            }
          - {
              os: "windows-latest",
              arch: "amd64",
              extension: ".exe",
              targetPath: "target/release/",
            }
          - {
              os: "macos-latest",
              arch: "aarch64",
              extension: "",
              targetPath: "target/aarch64-apple-darwin/release/",
            }
    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v3

      - name: lowercase the runner OS name
        shell: bash
        run: |
          OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          echo "RUNNER_OS=$OS" >> $GITHUB_ENV

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch != 'aarch64'
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: setup for cross-compile builds
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup toolchain install stable-aarch64-unknown-linux-gnu
          rustup target add --toolchain stable-aarch64-unknown-linux-gnu aarch64-unknown-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'macos-latest'
        with:
          toolchain: stable
          components: clippy, rustfmt
          target: aarch64-apple-darwin

      - name: Install latest Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        with:
          toolchain: stable
          components: clippy, rustfmt
          target: aarch64-unknown-linux-gnu

      - name: build release
        working-directory: ${{ env.working-directory }}
        if: matrix.config.arch != 'aarch64'
        run: "cargo build --release"

      - name: build release
        working-directory: ${{ env.working-directory }}
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'macos-latest'
        run: "cargo build --release --target aarch64-apple-darwin"

      - name: build release
        working-directory: ${{ env.working-directory }}
        if: matrix.config.arch == 'aarch64' && matrix.config.os == 'ubuntu-20.04'
        run: "cargo build --release --target aarch64-unknown-linux-gnu"

      - name: Determine artifact name
        shell: bash
        run: |
          echo "artifact-name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].targets[0].name')" >> $GITHUB_ENV
        working-directory: ${{ env.working-directory }}

      - uses: actions/upload-artifact@v3
        with:
          name: httpclient-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}
          if-no-files-found: error
          path: |
            ${{ env.working-directory }}/${{ matrix.config.targetPath }}${{ env.artifact-name }}${{ matrix.config.extension }}

  assemble_provider_archive:
    needs: [rust_check, build_artifact]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: wasmcloud/common-actions/install-wash@main
      # Downloads all artifacts
      - uses: actions/download-artifact@v3
        with:
          path: ${{ env.working-directory }}

      - name: Determine artifact name
        run: |
          echo "artifact-name=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].targets[0].name')" >> $GITHUB_ENV
        working-directory: ${{ env.working-directory }}

      - name: Create provider archive
        working-directory: ${{ env.working-directory }}
        run: |
          mkdir -p target/release
          mv ${{ env.artifact-name }}-linux-amd64/${{ env.artifact-name }} target/release/
          make par

      - name: Insert provider archive targets
        working-directory: ${{ env.working-directory }}
        run: |
          wash par insert --arch x86_64-macos   --binary ${{ env.artifact-name }}-macos-amd64/${{ env.artifact-name }} build/${{ env.artifact-name }}.par.gz
          wash par insert --arch aarch64-linux  --binary ${{ env.artifact-name }}-linux-aarch64/${{ env.artifact-name }} build/${{ env.artifact-name }}.par.gz
          wash par insert --arch aarch64-macos  --binary ${{ env.artifact-name }}-macos-aarch64/${{ env.artifact-name }} build/${{ env.artifact-name }}.par.gz
          wash par insert --arch x86_64-windows --binary ${{ env.artifact-name }}-windows-amd64/${{ env.artifact-name }}.exe build/${{ env.artifact-name }}.par.gz

      - name: Upload provider archive to GH Actions
        uses: actions/upload-artifact@v2
        with:
          name: provider-archive
          path: ${{ env.working-directory }}/build/${{ env.artifact-name }}.par.gz

  github_release:
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    needs: [rust_check, assemble_provider_archive]
    runs-on: ubuntu-20.04
    steps:
      - name: Download provider archive
        uses: actions/download-artifact@v3
        with:
          name: provider-archive
          path: ${{ env.working-directory }}/build

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.working-directory }}/build/*.par.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          draft: false

  artifact_release:
    needs: [rust_check, assemble_provider_archive]
    if: startswith(github.ref, 'refs/tags/') # Only run on tag push
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Download provider archive
        uses: actions/download-artifact@v3
        with:
          name: provider-archive
          path: ${{ env.working-directory }}/build

      - name: Determine artifact metadata
        run: |
          echo "oci-repository=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].name' | sed 's/wasmcloud-provider-//')" >> $GITHUB_ENV
          echo "oci-version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].version')" >> $GITHUB_ENV
        working-directory: ${{ env.working-directory }}

      - name: Push provider archive to AzureCR
        uses: wasmcloud/common-actions/oci-artifact-release@main
        with:
          artifact-path: ${{ env.working-directory }}/build/${{ env.oci-repository }}.par.gz
          oci-url: ${{ secrets.AZURECR_PUSH_URL }}
          oci-repository: ${{ env.oci-repository }}
          oci-version: ${{ env.oci-version }}
          oci-username: ${{ secrets.AZURECR_PUSH_USER }}
          oci-password: ${{ secrets.AZURECR_PUSH_PASSWORD }}
